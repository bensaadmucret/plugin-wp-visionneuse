<?php

/**
 * Generated by the WordPress Meta Box Generator
 * https://jeremyhixon.com/tool/wordpress-meta-box-generator/
 * 
 * Retrieving the values:
 * Lien de pdf  = get_post_meta( get_the_ID(), 'dc_lien-de-pdf', true )
 */
/*class DC_LINK_PDF {
	private $config = '{"title":"Advence_Visionneuse","prefix":"dc_","domain":"DC","class_name":"DC_LINK_PDF","context":"advanced","priority":"high","cpt":"tx_pop_up","fields":[{"type":"url","label":"Lien de pdf ","id":"dc_lien-de-pdf"}]}';

	public function __construct() {
		$this->config = json_decode( $this->config, true );
		$this->process_cpts();
		add_action( 'add_meta_boxes', [ $this, 'add_meta_boxes' ] );
		add_action( 'save_post', [ $this, 'save_post' ] );
	}

	public function process_cpts() {
		if ( !empty( $this->config['cpt'] ) ) {
			if ( empty( $this->config['post-type'] ) ) {
				$this->config['post-type'] = [];
			}
			$parts = explode( ',', $this->config['cpt'] );
			$parts = array_map( 'trim', $parts );
			$this->config['post-type'] = array_merge( $this->config['post-type'], $parts );
		}
	}

	public function add_meta_boxes() {
		foreach ( $this->config['post-type'] as $screen ) {
			add_meta_box(
				sanitize_title( $this->config['title'] ),
				$this->config['title'],
				[ $this, 'add_meta_box_callback' ],
				$screen,
				$this->config['context'],
				$this->config['priority']
			);
		}
	}

	public function save_post( $post_id ) {
		foreach ( $this->config['fields'] as $field ) {
			switch ( $field['type'] ) {
				case 'url':
					if ( isset( $_POST[ $field['id'] ] ) ) {
						$sanitized = esc_url_raw( $_POST[ $field['id'] ] );
						update_post_meta( $post_id, $field['id'], $sanitized );
					}
					break;
				default:
					if ( isset( $_POST[ $field['id'] ] ) ) {
						$sanitized = sanitize_text_field( $_POST[ $field['id'] ] );
						update_post_meta( $post_id, $field['id'], $sanitized );
					}
			}
		}
	}

	public function add_meta_box_callback() {
		$this->fields_table();
	}

	private function fields_table() {
		?><table class="form-table" role="presentation">
			<tbody><?php
				foreach ( $this->config['fields'] as $field ) {
					?><tr>
						<th scope="row"><?php $this->label( $field ); ?></th>
						<td><?php $this->field( $field ); ?></td>
					</tr><?php
				}
			?></tbody>
		</table><?php
	}

	private function label( $field ) {
		switch ( $field['type'] ) {
			default:
				printf(
					'<label class="" for="%s">%s</label>',
					$field['id'], $field['label']
				);
		}
	}

	private function field( $field ) {
		switch ( $field['type'] ) {
			default:
				$this->input( $field );
		}
	}

	private function input( $field ) {
		printf(
			'<input class="regular-text %s" id="%s" name="%s" %s type="%s" value="%s">',
			isset( $field['class'] ) ? $field['class'] : '',
			$field['id'], $field['id'],
			isset( $field['pattern'] ) ? "pattern='{$field['pattern']}'" : '',
			$field['type'],
			$this->value( $field )
		);
	}

	private function value( $field ) {
		global $post;
		if ( metadata_exists( 'post', $post->ID, $field['id'] ) ) {
			$value = get_post_meta( $post->ID, $field['id'], true );
		} else if ( isset( $field['default'] ) ) {
			$value = $field['default'];
		} else {
			return '';
		}
		return str_replace( '\u0027', "'", $value );
	}

}
new DC_LINK_PDF;

*/

/**
 * Generated by the WordPress Meta Box Generator
 * https://jeremyhixon.com/tool/wordpress-meta-box-generator/
 * 
 * Retrieving the values:
 * facebook = get_post_meta( get_the_ID(), 'advence_visionneuse_facebook', true )
 * Whatsapp = get_post_meta( get_the_ID(), 'advence_visionneuse_whatsapp', true )
 * Linkedin = get_post_meta( get_the_ID(), 'advence_visionneuse_linkedin', true )
 * Email = get_post_meta( get_the_ID(), 'advence_visionneuse_email', true )
 * SMS = get_post_meta( get_the_ID(), 'advence_visionneuse_sms', true )
 * copyLink = get_post_meta( get_the_ID(), 'advence_visionneuse_copylink', true )
 */
class Tx
{
	private $config = '{"title":"Advence Visionneuse","prefix":"advence_visionneuse_","domain":"tx","class_name":"Tx","post-type":["post"],"context":"normal","priority":"default","cpt":"tx_pop_up","fields":[{"type":"url","label":"facebook","id":"advence_visionneuse_facebook"},{"type":"url","label":"Whatsapp","id":"advence_visionneuse_whatsapp"},{"type":"url","label":"Linkedin","id":"advence_visionneuse_linkedin"},{"type":"url","label":"Email","id":"advence_visionneuse_email"},{"type":"url","label":"SMS","id":"advence_visionneuse_sms"},{"type":"url","label":"copyLink","id":"advence_visionneuse_copylink"}]}';

	public function __construct()
	{
		$this->config = json_decode($this->config, true);
		$this->process_cpts();
		add_action('add_meta_boxes', [$this, 'add_meta_boxes']);
		add_action('save_post', [$this, 'save_post']);
	}

	public function process_cpts()
	{
		if (!empty($this->config['cpt'])) {
			if (empty($this->config['post-type'])) {
				$this->config['post-type'] = [];
			}
			$parts = explode(',', $this->config['cpt']);
			$parts = array_map('trim', $parts);
			$this->config['post-type'] = array_merge($this->config['post-type'], $parts);
		}
	}

	public function add_meta_boxes()
	{
		foreach ($this->config['post-type'] as $screen) {
			add_meta_box(
				sanitize_title($this->config['title']),
				$this->config['title'],
				[$this, 'add_meta_box_callback'],
				$screen,
				$this->config['context'],
				$this->config['priority']
			);
		}
	}

	public function save_post($post_id)
	{
		foreach ($this->config['fields'] as $field) {
			switch ($field['type']) {
				case 'url':
					if (isset($_POST[$field['id']])) {
						$sanitized = esc_url_raw($_POST[$field['id']]);
						update_post_meta($post_id, $field['id'], $sanitized);
					}
					break;
				default:
					if (isset($_POST[$field['id']])) {
						$sanitized = sanitize_text_field($_POST[$field['id']]);
						update_post_meta($post_id, $field['id'], $sanitized);
					}
			}
		}
	}

	public function add_meta_box_callback()
	{
		$this->fields_table();
	}

	private function fields_table()
	{
?><table class="form-table" role="presentation">
			<tbody><?php
					foreach ($this->config['fields'] as $field) {
					?><tr>
						<th scope="row"><?php $this->label($field); ?></th>
						<td><?php $this->field($field); ?></td>
					</tr><?php
						}
							?></tbody>
		</table><?php
			}

			private function label($field)
			{
				switch ($field['type']) {
					default:
						printf(
							'<label class="" for="%s">%s</label>',
							$field['id'],
							$field['label']
						);
				}
			}

			private function field($field)
			{
				switch ($field['type']) {
					default:
						$this->input($field);
				}
			}

			private function input($field)
			{
				printf(
					'<input class="regular-text %s" id="%s" name="%s" %s type="%s" value="%s">',
					isset($field['class']) ? $field['class'] : '',
					$field['id'],
					$field['id'],
					isset($field['pattern']) ? "pattern='{$field['pattern']}'" : '',
					$field['type'],
					$this->value($field)
				);
			}

			private function value($field)
			{
				global $post;
				if (metadata_exists('post', $post->ID, $field['id'])) {
					$value = get_post_meta($post->ID, $field['id'], true);
				} else if (isset($field['default'])) {
					$value = $field['default'];
				} else {
					return '';
				}
				return str_replace('\u0027', "'", $value);
			}
		}
		new Tx;
